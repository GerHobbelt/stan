#include <stan/services/pathfinder/single.hpp>
#include <stan/io/array_var_context.hpp>
#include <stan/io/empty_var_context.hpp>
#include <test/test-models/good/normal_glm.hpp>
#include <test/unit/services/instrumented_callbacks.hpp>
#include <stan/callbacks/stream_writer.hpp>
#include <test/unit/services/pathfinder/util.hpp>
#include <gtest/gtest.h>

auto&& blah = stan::math::init_threadpool_tbb(1);

auto init_context() {
  std::fstream stream("/home/steve/stan/origin/stan/src/test/unit/services/pathfinder/glm_test.data.R", std::fstream::in);
  return stan::io::dump(stream);
}

class ServicesPathfinderSingle : public testing::Test {
 public:
  ServicesPathfinderSingle()
      : init(init_ss),
        parameter(parameter_ss),
        diagnostics(diagnostic_ss),
        context(init_context()),
        model(context, 0, &model_ss) {}

  std::stringstream init_ss, parameter_ss, diagnostic_ss, model_ss;
  stan::callbacks::stream_writer init;
  loggy logger;
  values parameter;
  values diagnostics;
  stan::io::dump context;
  stan_model model;
};

stan::io::array_var_context init_init_context() {
  std::vector<std::string> names_r{"b", "Intercept", "sigma"};
  std::vector<double> values_r{0, 0, 0, 0, 0, 0, 1};
  using size_vec = std::vector<size_t>;
  std::vector<size_vec> dims_r{size_vec{6}, size_vec{}, size_vec{}};
  std::vector<std::string> names_i{""};
  std::vector<int> values_i{};
  using size_vec = std::vector<size_t>;
  std::vector<size_vec> dims_i{size_vec{}};
  return stan::io::array_var_context(names_r, values_r, dims_r);
}

TEST_F(ServicesPathfinderSingle, rosenbrock) {
  constexpr unsigned int seed = 0;
  constexpr unsigned int chain = 1;
  constexpr double init_radius = .7;
  constexpr double num_elbo_draws = 80;
  constexpr double num_draws = 100;
  constexpr int history_size = 15;
  constexpr double init_alpha = 1;
  constexpr double tol_obj = 0;
  constexpr double tol_rel_obj = 0;
  constexpr double tol_grad = 0;
  constexpr double tol_rel_grad = 0;
  constexpr double tol_param = 0;
  constexpr int num_iterations = 60;
  constexpr bool save_iterations = false;
  constexpr int refresh = 1;
  mock_callback callback;
  stan::io::empty_var_context empty_context;// = init_init_context();

  Eigen::MatrixXd X_vals(7, 12);
  X_vals << -0.9379653474316, -0.906446, -0.682177, -0.516077, 0.656601, 1.06249, 1.07171, 1.00748, 1.02424, 1.00262, 0.998965, 0.998807, -0.511504401452839, -0.49175, -0.351237, -0.247312, 0.486332, 0.738993, 0.725828, 0.648645, 0.677527, 0.67996, 0.679536, 0.679433, 0.291413453407586, 0.294501, 0.316563, 0.333201, 0.450803, 0.494126, 0.533998, 0.602209, 0.565176, 0.529828, 0.526583, 0.526686, 1.6328311599791, 1.61069, 1.45323, 1.33681, 0.514938, 0.232202, 0.251525, 0.346413, 0.309305, 0.302608, 0.30297, 0.303124, -1.19327227585018, -1.17169, -1.01816, -0.904524, -0.102272, 0.17477, 0.171626, 0.109297, 0.129993, 0.123168, 0.121544, 0.121431, 1.59355873987079, 1.60035, 1.64863, 1.68432, 1.93627, 2.0229, 2.0163, 1.98586, 1.99788, 2.0005, 2.00047, 2.00043, 1.77870107442141, 1.37282, 0.886139, 0.896325, 0.62072, 0.479404, 0.438835, 0.352543, 0.355224, 0.348206, 0.346179, 0.346386;
  //X_vals.transposeInPlace();
  //std::cout << "X: \n" << X_vals << "\n";
  Eigen::MatrixXd G_vals(7, 12);
  G_vals << -538.795258957539, -1193.54, -2787.09, -2460.93, -963.116, 240.828, 295.796, 35.3482, 118.845, 18.1959, 0.707573, -0.0732505, -337.686441619218, -747.813, -1741.9, -1534.7, -555.248, 226.509, 191.577, -150.733, -9.21149, 2.36078, 0.236548, -0.275565, -52.7756240774553, -117.388, -283.128, -256.908, -194.133, -131.901, 22.2857, 373.053, 186.283, 14.9878, -0.779346, -0.243255, 378.444156818226, 838.015, 1950.94, 1718.05, 610.5, -272.085, -214.05, 215.538, 31.3514, -2.37823, -0.648677, 0.124479, -368.904255729204, -817.083, -1905.83, -1681.12, -635.263, 202.618, 205.27, -62.8332, 39.5327, 8.25498, 0.406626, -0.154521, -116.09861240689, -256.969, -597.95, -526.455, -185.436, 86.1095, 65.9468, -72.0084, -12.5622, 0.3128, 0.173923, -0.0556924, 6938.06445770271, 3285.01, -4563.34, -2196, 3488.28, 2271.27, 1635.71, 78.8554, 165.178, 36.9415, -3.38412, 0.741704;
  //G_vals.transposeInPlace();
  //std::cout << "G: \n" << G_vals << "\n";
  Eigen::MatrixXd Ykt_diff = G_vals.middleCols(1, 11) - G_vals.leftCols(11);
  Eigen::MatrixXd Skt_diff = X_vals.middleCols(1, 11) - X_vals.leftCols(11);
  auto Dk = ((Ykt_diff.array()) * Skt_diff.array()).colwise().sum().eval();
  auto thetak = (Ykt_diff.array().square().colwise().sum()).abs().eval();
  if (STAN_DEBUG_PATH_CURVE_CHECK) {
    std::cout << "\n Check Dk: \n" << Dk.transpose() << "\n";
    std::cout << "\n Check thetak: \n" << thetak.transpose() << "\n";
  }

  std::vector<std::tuple<Eigen::VectorXd, Eigen::VectorXd>> input_iters;
  for (Eigen::Index i = 0; i < X_vals.cols(); ++i) {
    input_iters.emplace_back(X_vals.col(i), G_vals.col(i));
  }


  int return_code
      = stan::services::optimize::pathfinder_lbfgs_single(//X_vals, G_vals,
          model, empty_context, seed, chain, init_radius, history_size,
          init_alpha, tol_obj, tol_rel_obj, tol_grad, tol_rel_grad, tol_param,
          num_iterations, save_iterations, refresh, callback, num_elbo_draws,
          num_draws, 100, 1, logger, init, parameter, diagnostics);
  for (auto&& times : parameter.times_) {
    std::cout << times;
  }

  // Eigen::MatrixXd param_vals = parameter.values_.transpose();
  // Eigen::MatrixXd param_vals = parameter.values_.transpose();
  Eigen::MatrixXd param_vals = std::move(parameter.values_);

  std::cout << "\n --- Optim Path ---" << std::endl;
  for (Eigen::Index i = 0; i < diagnostics.optim_path_.size(); ++i) {
    Eigen::MatrixXd tmp(2, param_vals.cols() - 1);
    tmp.row(0) = std::get<0>(diagnostics.optim_path_[i]);
    tmp.row(1) = std::get<1>(diagnostics.optim_path_[i]);
    std::cout << "Iter: " << i << "\n" << tmp << "\n";
  }
  Eigen::IOFormat CommaInitFmt(Eigen::StreamPrecision, 0, ", ", ", ", "\n", "",
                               "", "");

  std::cout << "---- Results  -------" << std::endl;
  Eigen::VectorXd mean_vals = param_vals.rowwise().mean().eval();
  //       std::cout << "Mean Values: \n" <<
  //       mean_vals.transpose().eval().format(CommaInitFmt) << "\n";
  Eigen::VectorXd sd_vals = (((param_vals.colwise() - mean_vals)
                                  .array()
                                  .square()
                                  .matrix()
                                  .rowwise()
                                  .sum()
                                  .array()
                              / (param_vals.cols() - 1))
                                 .sqrt())
                                .transpose()
                                .eval();
  //std::cout << "\n\n" << param_vals.format(CommaInitFmt) << "\n\n";
  Eigen::MatrixXd prev_param_vals(10, 100);
  prev_param_vals << 0.998768,   1.01892,   1.01378,  0.997384,  0.991759,  0.988145,  0.993196,   1.00639,  0.987122,   1.01381,  0.992912,  0.994683,   1.00164,  0.982378,  0.975201,   1.01735,   1.01221,  0.988884,   1.01953,  0.989778,   1.01562,  0.993258,   1.00377,   1.00196,   1.00466,  0.989829,   1.00294,  0.985458,   1.02626,  0.976401,   1.00409,   0.98932,  0.986574,   1.00322,   1.01992,    1.0067,   1.04195,  0.985226,   1.02086,   1.01011,   1.00915,   1.00454,  0.991391,  0.986256,  0.999612,   1.00834,  0.998792,  0.970487,   1.00754,  0.998513,   1.00094,  0.999642,  0.983342,   1.00388,  0.980656,    1.0044,   1.01411,   1.00717,  0.983437,  0.985205,     1.007,  0.946729,   0.98633,  0.995395,  0.993307,  0.999655,  0.979269,  0.981213,  0.975086,   1.00444,  0.983394,  0.994332,   1.00796,   1.02034,  0.995499,  0.999279,   0.98505,   1.00018,   1.02545,   1.01407,  0.987407,  0.997913,   1.00738,  0.990453,  0.991748,  0.992402,   1.00212,   1.00253,   0.99422,   1.00191,   0.98971,   1.00208,  0.996873,   1.02158,  0.990287,   1.03244,   1.01015,  0.999285,    1.0183,  0.997344,
 0.689734,  0.687295,  0.677906,  0.676871,  0.643644,  0.675287,  0.703437,   0.68557,  0.690412,  0.655713,  0.665873,  0.680721,  0.666564,  0.720027,  0.675663,  0.669115,  0.673655,  0.672652,  0.675698,  0.647254,  0.700756,  0.681322,  0.688791,  0.680401,  0.702072,  0.703857,  0.689238,  0.692845,  0.660465,   0.66203,  0.677417,  0.682728,  0.682464,  0.687743,   0.69117,  0.686312,  0.683264,  0.688891,  0.681935,  0.673281,  0.670535,  0.675413,  0.664157,  0.668416,  0.684161,  0.675725,  0.707934,  0.695623,  0.704355,  0.695483,  0.652959,  0.674223,  0.693523,  0.687718,  0.668006,  0.666488,  0.672449,   0.69047,  0.704407,  0.697127,  0.675361,  0.687702,  0.685095,  0.706238,  0.663327,  0.629656,  0.679503,  0.676351,  0.700626,  0.681818,  0.683726,  0.691781,  0.680456,  0.674481,  0.657167,  0.673241,  0.678112,  0.706842,    0.6628,  0.706145,  0.692086,  0.675256,  0.702773,  0.677653,  0.699122,  0.667708,  0.683464,  0.660173,   0.67239,  0.689871,  0.687037,  0.692902,  0.678781,   0.67763,  0.665326,  0.703389,  0.688915,  0.658982,  0.667469,   0.67736,
 0.537651,  0.501934,  0.524489,   0.51101,  0.525481,  0.511844,  0.526438,  0.517873,  0.549129,  0.538044,  0.538047,  0.544184,  0.514265,  0.527197,  0.532608,  0.539312,  0.505302,  0.533269,  0.530499,  0.557108,  0.520172,  0.526507,  0.522582,  0.526282,  0.537803,  0.498424,  0.517708,  0.543287,  0.517425,  0.522026,  0.530069,  0.534258,  0.510398,  0.557594,  0.514517,  0.527215,  0.537304,  0.533336,   0.54898,  0.526664,  0.526325,  0.541278,  0.532482,  0.525875,  0.528208,  0.517557,   0.52561,  0.506957,  0.521328,  0.547193,   0.52456,  0.521669,   0.55329,  0.515016,  0.549616,  0.516675,  0.532831,  0.518088,  0.538623,  0.531505,  0.522945,  0.546341,  0.521158,  0.532244,  0.531457,  0.541822,  0.530545,  0.518906,  0.537063,  0.540587,  0.529549,  0.513517,   0.56116,  0.533075,  0.524073,  0.522234,  0.539746,  0.501669,   0.53726,  0.516177,  0.536885,  0.517953,  0.539845,  0.491212,  0.525757,  0.530532,  0.524419,  0.534345,  0.517051,  0.509994,  0.505837,  0.484148,  0.526056,  0.514705,  0.494631,  0.503685,  0.519116,   0.52777,  0.507181,  0.514524,
 0.288437,  0.303873,  0.325022,  0.296971,  0.284632,  0.299111,  0.305699,  0.308478,  0.317522,  0.330149,  0.310983,  0.279411,   0.31142,  0.304774,  0.323317,  0.297759,  0.294785,    0.3172,  0.315434,  0.305687,   0.30035,  0.284701,  0.321885,  0.299507,  0.302878,  0.298419,  0.298923,  0.313636,  0.316968,  0.303452,  0.310997,  0.300027,  0.276126,  0.300736,  0.294313,   0.29979,  0.309598,  0.300342,  0.318588,  0.288201,  0.286901,  0.303718,  0.281958,  0.316732,   0.32677,  0.298656,  0.289881,  0.306533,  0.301426,   0.32279,  0.282818,  0.304401,  0.296308,  0.320767,  0.307119,  0.304688,  0.281331,  0.302625,  0.318226,  0.304141,  0.296139,  0.296739,  0.319989,  0.313823,  0.299041,  0.327815,  0.295445,  0.295295,  0.296081,  0.330599,  0.296343,  0.300891,  0.287682,   0.25915,  0.305602,  0.292444,  0.328711,  0.288019,  0.288367,    0.3078,  0.297932,  0.303537,  0.320794,  0.306071,  0.307751,  0.322818,  0.302873,   0.30536,   0.30658,  0.283696,  0.298181,  0.309028,  0.295517,  0.302568,  0.292619,  0.310016,  0.287418,  0.294985,  0.290241,  0.295494,
 0.152476, 0.0885262,  0.140507,  0.134372,  0.128105,  0.141493,  0.115095,  0.107938,  0.111209,  0.126821,   0.13009,  0.124165,  0.130481,   0.12965,  0.109613,  0.120521,  0.107087,  0.126868,  0.124507,  0.146256,  0.110753,  0.127752,  0.121519,  0.132825,   0.10846,  0.107335,  0.115168,  0.113401,  0.131084,  0.114995,  0.119525,  0.117336,  0.125379,  0.120874,  0.122062,  0.111693,  0.132989,  0.109364,  0.133468,    0.1283,  0.101588,  0.137876,   0.13825,  0.107247,  0.129651,  0.118257,  0.118752,    0.1289,  0.109173,  0.129401,   0.13691,  0.141266,  0.108907,  0.119123,  0.113889,  0.120819,  0.115702,  0.141747,  0.136925,  0.110381,  0.121674,  0.128585,  0.110583,  0.130098,  0.144264,  0.136997,  0.126681,  0.114911,  0.113253,  0.114192,  0.125688,  0.140513,  0.123144,  0.134859,  0.125526,  0.109276,  0.112204,  0.126343,  0.141546,  0.115707,  0.118985, 0.0977306,  0.132948,  0.123065,   0.10594,  0.108164,  0.101447,  0.127462,  0.141766,  0.137288,  0.121522,  0.124977,  0.133298,  0.128517, 0.0912071, 0.0975932,  0.123152,  0.130155,  0.115785,  0.129214,
  2.01294,    2.0094,   1.98865,   2.02009,   1.97223,   2.00657,   2.00568,   1.99092,   1.97004,   2.02405,   2.00121,   2.00374,   2.02578,    2.0137,   2.01889,   1.99825,   2.00404,   1.99457,   2.00828,   2.01994,   2.01188,     2.008,   2.01958,   1.97875,   2.00839,   1.98186,   1.99446,   2.01358,    2.0146,   2.02244,   1.99042,   1.96797,   1.98343,   1.98631,   2.03158,   2.00229,   1.96099,   2.00511,   2.00907,   2.00691,   2.00244,   2.00019,   1.99515,   2.00072,   2.01201,   1.97965,   2.00779,   2.01976,    1.9858,   2.02488,   1.99621,     1.976,   1.98235,   2.01074,   2.00969,   1.98971,   2.00816,    2.0201,   1.99799,   2.00813,   2.02453,   1.98667,   1.98827,   1.99257,   1.99475,   2.02153,   2.01681,   2.01072,   1.98103,   2.00463,   1.99538,   1.98933,   1.98934,   2.01047,   1.99772,   1.98795,   1.99834,   2.00597,   1.99568,   1.99414,   1.98823,   2.01262,   2.00319,   2.02027,   1.99895,   2.00981,   2.00173,   2.02849,   1.99045,   1.98714,   1.96953,   1.99495,    1.9822,   1.96714,   2.01215,   1.99641,   2.01843,   2.02486,   2.02179,    1.9939,
  1.40779,   1.40492,   1.41587,   1.40567,   1.43162,   1.41322,   1.40993,   1.41555,   1.42831,   1.40385,   1.41643,   1.41394,    1.4036,   1.40656,   1.41083,    1.4131,   1.41014,   1.41898,   1.40713,   1.41176,   1.40342,    1.4117,   1.40343,   1.42242,   1.40726,    1.4199,   1.41436,   1.40964,   1.40452,   1.41058,   1.41743,   1.42943,   1.42291,   1.41913,   1.39529,   1.41098,    1.4225,   1.41362,   1.40634,   1.40997,   1.41251,   1.41377,   1.41968,   1.41724,   1.40798,   1.42121,   1.40767,   1.40834,   1.41556,   1.40209,   1.41851,   1.42448,   1.42383,   1.40706,   1.41533,   1.41861,   1.40915,   1.40242,   1.41495,    1.4113,   1.40267,    1.4291,   1.42038,   1.41473,   1.41929,   1.41061,   1.41073,   1.41303,   1.42455,    1.4109,   1.41853,   1.41752,   1.41809,   1.40701,   1.41811,   1.41992,   1.41758,   1.40754,   1.41337,   1.41031,   1.42012,   1.40925,   1.40858,   1.40609,   1.41353,   1.41236,   1.41232,   1.40376,   1.41936,   1.41745,   1.42729,   1.41265,   1.42212,   1.42369,   1.41146,   1.40601,   1.40309,   1.40594,   1.40229,   1.41689,
  2.00722,   2.00334,   1.98237,   2.01425,   1.96622,   2.00076,   1.99985,   1.98486,   1.96392,   2.01745,   1.99503,   1.99798,   2.01964,   2.00811,   2.01273,   1.99206,   1.99805,   1.98841,   2.00199,   2.01366,   2.00597,   2.00227,   2.01343,   1.97281,   2.00245,   1.97623,   1.98858,   2.00756,    2.0082,   2.01644,   1.98427,   1.96204,   1.97791,   1.98025,   2.02569,   1.99631,   1.95467,   1.99924,   2.00272,   2.00098,   1.99644,    1.9941,   1.98933,   1.99452,   2.00579,   1.97364,   2.00216,   2.01412,   1.97994,   2.01873,   1.99027,   1.97001,   1.97648,   2.00462,   2.00356,    1.9836,   2.00221,   2.01423,    1.9921,   2.00229,   2.01854,   1.98106,    1.9822,   1.98669,   1.98875,   2.01485,   2.01102,   2.00491,   1.97536,   1.99823,   1.98958,   1.98358,   1.98332,    2.0048,   1.99157,     1.982,   1.99205,   2.00045,   1.98956,   1.98823,   1.98241,   2.00656,    1.9971,   2.01442,   1.99305,   2.00349,    1.9957,   2.02228,   1.98448,   1.98153,   1.96379,   1.98915,   1.97633,   1.96106,   2.00626,   1.99034,   2.01265,   2.01881,   2.01578,   1.98805,
  26.8128,    24.983,   26.0907,   29.0084,    25.324,   28.8413,   29.2515,   28.0818,   26.2394,   24.9872,   29.7509,   25.5308,   28.5137,    25.515,   25.5267,   29.2474,   26.5925,   29.9046,   28.7475,   20.1175,   28.8172,   29.6462,   29.0819,   29.5853,   28.8523,   25.4251,   30.4119,    28.647,   24.5508,   27.6237,   30.5896,    28.719,   25.8561,    28.061,   25.5014,   30.1615,   20.4195,   29.8294,   27.0628,   29.8038,   28.0436,   29.5135,   27.3784,   29.1934,   28.7434,   29.5754,   26.8696,   26.4616,   28.1168,   26.6426,   27.2795,   28.2159,   25.0372,   29.4748,   28.2674,   30.0786,   28.4563,   28.6533,   26.7732,   26.6745,   29.6358,   23.0296,   28.9059,   27.9731,   28.2349,   20.3272,   29.1177,   29.4791,   27.0541,   27.8309,    27.032,   28.4353,   26.8027,   23.3929,   29.6171,   29.6804,   27.9638,   26.0989,   26.5469,   27.9063,   29.1115,   28.1841,   26.5964,    26.664,   29.0834,   26.3702,   29.7716,   27.0688,   28.6776,   27.0731,   27.6256,   25.9056,   29.9007,   26.9172,   24.1207,   23.6996,    29.137,   28.3828,   26.4647,   29.4206,
  17659.6,   17661.7,   17658.6,   17658.1,   17663.4,   17657.6,   17657.4,   17656.8,   17661.5,   17661.7,   17656.8,   17657.8,     17659,   17661.3,   17659.3,   17657.1,     17658,   17656.8,   17657.5,   17663.3,   17658.8,   17656.8,   17658.3,   17657.5,   17658.1,   17660.8,   17656.3,   17658.1,   17660.2,     17659,   17656.1,   17659.8,   17659.6,   17658.8,   17661.9,   17656.2,     17665,   17656.8,   17659.4,   17656.8,   17657.7,   17656.9,   17658.5,   17657.3,   17657.7,   17657.4,   17658.4,   17660.4,   17658.4,   17660.7,   17659.2,   17658.7,   17660.2,   17657.5,   17658.5,   17656.7,   17657.9,   17658.9,   17659.2,   17657.4,     17658,     17665,   17657.7,   17658.1,     17658,   17665.8,   17657.5,     17657,   17660.1,   17658.3,   17656.5,   17657.7,   17659.7,   17662.7,     17657,   17656.9,   17658.4,     17660,   17659.9,   17658.6,   17657.2,   17657.7,   17658.8,   17660.2,   17657.4,   17657.7,   17656.7,   17659.3,   17657.5,   17658.6,   17660.2,   17660.8,   17657.2,   17660.5,   17661.7,   17663.2,   17658.3,   17658.9,   17660.2,   17656.4;
//  std::cout << "\n\n" << prev_param_vals << "\n\n";
Eigen::VectorXd prev_mean_vals = prev_param_vals.rowwise().mean().eval();
//       std::cout << "Mean Values: \n" <<
//       mean_vals.transpose().eval().format(CommaInitFmt) << "\n";
Eigen::VectorXd prev_sd_vals = (((prev_param_vals.colwise() - prev_mean_vals)
                                .array()
                                .square()
                                .matrix()
                                .rowwise()
                                .sum()
                                .array()
                            / (prev_param_vals.cols() - 1))
                               .sqrt())
                              .transpose()
                              .eval();
  Eigen::MatrixXd ans_diff = param_vals - prev_param_vals;
  Eigen::VectorXd mean_diff_vals = ans_diff.rowwise().mean();
  //      std::cout << "diff Mean Values: \n" <<
  //      mean_diff_vals.transpose().eval().format(CommaInitFmt) << "\n";
  Eigen::VectorXd sd_diff_vals = (((ans_diff.colwise() - mean_diff_vals)
                                       .array()
                                       .square()
                                       .matrix()
                                       .rowwise()
                                       .sum()
                                       .array()
                                   / (ans_diff.cols() - 1))
                                      .sqrt())
                                     .transpose()
                                     .eval();

  Eigen::MatrixXd all_mean_vals(3, 10);
  all_mean_vals.row(0) = mean_vals;
  all_mean_vals.row(1) = prev_mean_vals;
  all_mean_vals.row(2) = mean_diff_vals;

  Eigen::MatrixXd all_sd_vals(3, 10);
  all_sd_vals.row(0) = sd_vals;
  all_sd_vals.row(1) = prev_sd_vals;
  all_sd_vals.row(2) = sd_diff_vals;
  for (int i = 0; i < all_mean_vals.cols() - 1; ++i) {
    EXPECT_NEAR(0, all_mean_vals(2, i), 4e-5);
  }
  EXPECT_NEAR(0, all_mean_vals(2, 9), 0.05);
  std::cout << "\nMean vals:\n" << all_mean_vals.format(CommaInitFmt) << "\n";
  std::cout << "\nSD vals:\n" << all_sd_vals.format(CommaInitFmt) << "\n";
  std::cout << "\nMean vals:\n" << mean_vals.format(CommaInitFmt) << "\n";
  std::cout << "\nSD vals:\n" << sd_vals.format(CommaInitFmt) << "\n";
}
